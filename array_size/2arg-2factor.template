// Fix paren-wrapped top-level args
@@
expression HANDLE;
expression E;
@@

  %alloc%(HANDLE,
-	  (E)
+	  E
  , ...)

// Drop single-byte sizes and redundant parens.
@@
expression HANDLE;
expression COUNT;
typedef u8;
typedef __u8;
@@

(
  %alloc%(HANDLE,
-	(sizeof(u8)) * (COUNT)
+	COUNT
  , ...)
|
  %alloc%(HANDLE,
-	(sizeof(__u8)) * (COUNT)
+	COUNT
  , ...)
|
  %alloc%(HANDLE,
-	(sizeof(char)) * (COUNT)
+	COUNT
  , ...)
|
  %alloc%(HANDLE,
-	(sizeof(unsigned char)) * (COUNT)
+	COUNT
  , ...)
)

// 2-factor product with sizeof(type/expression) and identifier or constant.
@@
expression HANDLE;
type TYPE;
expression THING;
identifier COUNT_ID;
constant COUNT_CONST;
@@

(
- %alloc%
+ %calloc%
  (HANDLE,
-	(sizeof(TYPE)) * (COUNT_ID)
+	COUNT_ID, sizeof(TYPE)
  , ...)
|
- %alloc%
+ %calloc%
  (HANDLE,
-	(sizeof(TYPE)) * (COUNT_CONST)
+	COUNT_CONST, sizeof(TYPE)
  , ...)
|
- %alloc%
+ %calloc%
  (HANDLE,
-	(sizeof(THING)) * (COUNT_ID)
+	COUNT_ID, sizeof(THING)
  , ...)
|
- %alloc%
+ %calloc%
  (HANDLE,
-	(sizeof(THING)) * (COUNT_CONST)
+	COUNT_CONST, sizeof(THING)
  , ...)
)

// 2-factor product, only identifiers.
@@
expression HANDLE;
identifier SIZE, COUNT;
@@

- %alloc%
+ %calloc%
  (HANDLE,
-	(SIZE) * (COUNT)
+	COUNT, SIZE
  , ...)
